/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFontChooser.java
 *
 * Created on 28 août 2011, 17:46:49
 */
package font_chooser;

import java.beans.PropertyChangeEvent;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.Box.Filler;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.JOptionPane;
import static java.awt.font.TextAttribute.*;

/**
 *
 * @author Patrice
 */
public class JFontChooser extends JDialog {

  private String[] fontnames;
  private String[] fontsizes;
  private String PREVIEW_TEXT = "Vue de la police";
  private Font font;
  private int Closed_Option = JOptionPane.CLOSED_OPTION;


  public String[] getFontnames() {
    return fontnames;
  }

  public void setFontnames(String[] aFontNames) {
    setFontnames(aFontNames);
  }

  public String[] getFontsizes() {
    return fontsizes;
  }

  public void setFontsizes(String[] aFontsizes) {
    fontsizes = aFontsizes;
  }



  /** Creates new form JFontChooser
   * @param parent
   * @param modal
   */
  public JFontChooser(Frame parent, boolean modal) {
    super(parent, modal);
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    fontnames = ge.getAvailableFontFamilyNames();
    fontsizes = new String[] { "8", "9", "10", "11", "12", "14", "16",
         "18", "20", "22", "24", "26", "28", "36", "48", "72" };
    SimpleAttributeSet a = new SimpleAttributeSet();
    StyleConstants.setFontFamily(a, "Monospaced");
    StyleConstants.setFontSize(a, 20);
    initComponents();
    String name = StyleConstants.getFontFamily(a);
    fontInputList.setSelected(name);
    int size = StyleConstants.getFontSize(a);
    sizeInputList.setSelectedInt(size);
    updatePreview();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    colorComboBoxModel = new ColorComboBoxModel();
    colorComboRenderer = new ColorComboRenderer();
    fonts = new JPanel();
    fontInputList = new JInputList(fontnames, "Name:");
    sizeInputList = new JInputList(fontsizes, "Sizes:");
    effects = new JPanel();
    boldCheckBox = new JCheckBox();
    underlineCheckBox = new JCheckBox();
    superscriptCheckBox = new JCheckBox();
    italicCheckBox = new JCheckBox();
    strikethroughCheckBox = new JCheckBox();
    subscriptCheckBox = new JCheckBox();
    vstrut = new Filler(new Dimension(0, 5), new Dimension(0, 5), new Dimension(32767, 5));
    colorPanel = new JPanel();
    filler2 = new Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(100, 32767));
    colorLabel = new JLabel();
    filler3 = new Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
    colorComboBox = new JComboBox();
    filler4 = new Filler(new Dimension(10, 0), new Dimension(10, 0), new Dimension(10, 32767));
    previewPanel = new JPanel();
    previewLabel = new JLabel();
    checkPanel = new JPanel();
    validdationPanel = new JPanel();
    okButton = new JButton();
    cancelButton = new JButton();

    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    setMinimumSize(new Dimension(430, 500));
    getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

    fonts.setBorder(BorderFactory.createTitledBorder(null, "Police", TitledBorder.LEFT, TitledBorder.TOP));
    fonts.setLayout(new GridLayout(1, 2, 10, 2));

    fontInputList.setMinimumSize(new Dimension(72, 140));
    fontInputList.setName("choosefont"); // NOI18N
    fontInputList.setPreferredSize(new Dimension(72, 140));
    fontInputList.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        jInputListPropertyChange(evt);
      }
    });
    fonts.add(fontInputList);

    sizeInputList.setName("choosesize"); // NOI18N
    sizeInputList.addPropertyChangeListener(new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent evt) {
        jInputListPropertyChange(evt);
      }
    });
    fonts.add(sizeInputList);

    getContentPane().add(fonts);

    effects.setBorder(BorderFactory.createTitledBorder(null, "Effets", TitledBorder.LEFT, TitledBorder.TOP));
    effects.setLayout(new GridLayout(2, 3, 10, 5));

    boldCheckBox.setText("Gras");
    boldCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    effects.add(boldCheckBox);

    underlineCheckBox.setText("Souligné");
    underlineCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    effects.add(underlineCheckBox);

    superscriptCheckBox.setText("Exposant");
    superscriptCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    effects.add(superscriptCheckBox);

    italicCheckBox.setText("Italique");
    italicCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    effects.add(italicCheckBox);

    strikethroughCheckBox.setText("Barré");
    strikethroughCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    effects.add(strikethroughCheckBox);

    subscriptCheckBox.setText("Indice");
    subscriptCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    effects.add(subscriptCheckBox);

    getContentPane().add(effects);
    getContentPane().add(vstrut);

    colorPanel.setMinimumSize(new Dimension(200, 30));
    colorPanel.setPreferredSize(new Dimension(303, 30));
    colorPanel.setLayout(new BoxLayout(colorPanel, BoxLayout.LINE_AXIS));
    colorPanel.add(filler2);

    colorLabel.setLabelFor(colorComboBox);
    colorLabel.setText("Couleur");
    colorPanel.add(colorLabel);
    colorPanel.add(filler3);

    colorComboBox.setModel(colorComboBoxModel);
    colorComboBox.setRenderer(colorComboRenderer);
    colorComboBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkActionPerformed(evt);
      }
    });
    colorPanel.add(colorComboBox);
    colorPanel.add(filler4);

    getContentPane().add(colorPanel);

    previewPanel.setBorder(BorderFactory.createTitledBorder(null, "Vue", TitledBorder.LEFT, TitledBorder.TOP));
    previewPanel.setLayout(new BorderLayout());

    previewLabel.setBackground(new Color(255, 255, 255));
    previewLabel.setHorizontalAlignment(SwingConstants.CENTER);
    previewLabel.setText("Vue de la police");
    previewLabel.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
    previewLabel.setMaximumSize(new Dimension(200, 80));
    previewLabel.setOpaque(true);
    previewLabel.setPreferredSize(new Dimension(200, 80));
    previewPanel.add(previewLabel, BorderLayout.CENTER);

    getContentPane().add(previewPanel);

    validdationPanel.setLayout(new GridLayout(1, 2));

    okButton.setText("OK");
    okButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });
    validdationPanel.add(okButton);

    cancelButton.setText("Annuler");
    cancelButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    validdationPanel.add(cancelButton);

    checkPanel.add(validdationPanel);

    getContentPane().add(checkPanel);

    pack();
  }// </editor-fold>//GEN-END:initComponents

private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
  Closed_Option = JOptionPane.OK_OPTION;
  dispose();
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
  Closed_Option = JOptionPane.CANCEL_OPTION;
  dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

private void jInputListPropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_jInputListPropertyChange
  if(evt.getPropertyName().equals("selected")) {
    updatePreview();
  }
}//GEN-LAST:event_jInputListPropertyChange

private void checkActionPerformed(ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
  updatePreview();
}//GEN-LAST:event_checkActionPerformed


  /**
   * mise à jour du texte écrit avec la nouvelle police de caractères
   */
//*
  private void updatePreview() {
    StringBuilder previewText = new StringBuilder(PREVIEW_TEXT);
    String name = fontInputList.getSelected();
    int size = sizeInputList.getSelectedInt();
    if (size <= 0)
      return;

    Map<TextAttribute, Object> attribs = new HashMap<TextAttribute, Object>();

    attribs.put(FAMILY, name);
    attribs.put(SIZE, (float)size);

    // Using HTML to force JLabel manage natively unsupported attributes
    if (underlineCheckBox.isSelected() || strikethroughCheckBox.isSelected()){
      previewText.insert(0,"<html>");
      previewText.append("</html>");
    }

    if (underlineCheckBox.isSelected()){
      attribs.put(UNDERLINE, UNDERLINE_LOW_ONE_PIXEL);
      previewText.insert(6,"<u>");
      previewText.insert(previewText.length() - 7, "</u>");
    }
    if (strikethroughCheckBox.isSelected()){
      attribs.put(STRIKETHROUGH, STRIKETHROUGH_ON);
      previewText.insert(6,"<strike>");
      previewText.insert(previewText.length() - 7, "</strike>");
    }
    if (boldCheckBox.isSelected())
      attribs.put(WEIGHT, WEIGHT_BOLD);
    if (italicCheckBox.isSelected())
      attribs.put(POSTURE, POSTURE_OBLIQUE);
    if (subscriptCheckBox.isSelected()){
      attribs.put(SUPERSCRIPT, SUPERSCRIPT_SUB);
    }
    if (superscriptCheckBox.isSelected())
      attribs.put(SUPERSCRIPT, SUPERSCRIPT_SUPER);

    superscriptCheckBox.setEnabled(!subscriptCheckBox.isSelected());
    subscriptCheckBox.setEnabled(!superscriptCheckBox.isSelected());


    font = new Font(attribs);

    previewLabel.setText(previewText.toString());
    previewLabel.setFont(getFont());

    Color c = (Color) colorComboBox.getSelectedItem();
    previewLabel.setForeground(c);
    previewLabel.repaint();
  }

  public int getClosed_Option() {
    return Closed_Option;
  }

  @Override
  public Font getFont() {
    return font;
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {

    /* Set the Nimbus look and feel (bug pour la couleur de fond des comboBox) */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    /*
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(JFontChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(JFontChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(JFontChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(JFontChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
//*/
    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        JFontChooser dialog = new JFontChooser(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosed(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JCheckBox boldCheckBox;
  private JButton cancelButton;
  private JPanel checkPanel;
  private JComboBox colorComboBox;
  private ColorComboBoxModel colorComboBoxModel;
  private ColorComboRenderer colorComboRenderer;
  private JLabel colorLabel;
  private JPanel colorPanel;
  private JPanel effects;
  private Filler filler2;
  private Filler filler3;
  private Filler filler4;
  private JInputList fontInputList;
  private JPanel fonts;
  private JCheckBox italicCheckBox;
  private JButton okButton;
  private JLabel previewLabel;
  private JPanel previewPanel;
  private JInputList sizeInputList;
  private JCheckBox strikethroughCheckBox;
  private JCheckBox subscriptCheckBox;
  private JCheckBox superscriptCheckBox;
  private JCheckBox underlineCheckBox;
  private JPanel validdationPanel;
  private Filler vstrut;
  // End of variables declaration//GEN-END:variables
}
